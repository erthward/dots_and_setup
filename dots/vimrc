"DEH: 08-09-17: Setting up my own Vim configs (to start off, a la
"https://realpython.com/vim-and-python-a-match-made-in-heaven/)

set nocompatible      " required
filetype off          " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin('~/.vim/bundle/')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'morhetz/gruvbox'
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'jacoborus/tender.vim'
Plugin 'connorholyday/vim-snazzy'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'fortes/vim-escuro'
Plugin 'junegunn/seoul256.vim'
"Plugin 'aradunovic/perun.vim'
Plugin 'crusoexia/vim-dream'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-vividchalk'
Plugin 'tpope/vim-surround'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'Sunset'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'Julialang/julia-vim'
Plugin 'JuliaEditorSupport/julia-vim'
Plugin 'jgdavey/tslime.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'junegunn/vim-emoji'
Plugin 'arthurxavierx/vim-unicoder'
"Plugin 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }
"Plugin 'sheerun/vim-polyglot'
"Plugin 'vim-python/python-syntax'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Show line numbers by default
set nu
" Show line and column number
set ruler
" Set encoding to UTF-8
set encoding=utf-8
" Expand tabs to spaces
set expandtab
"Backspace through everything in insert mode
set backspace=indent,eol,start
" DEH 06-01-14: changed to DO wrap lines
set wrap
" Highlight search matches
set hlsearch
" Incremental searching
set incsearch
" Make searches case-insensitive
set ignorecase
" ... unless they contain at least one capital letter
set smartcase

" use :w!! to write to a file using sudo if I forgot to open it with sudo
cmap w!! %!sudo tee > /dev/null %

" Map arrow keys to be based on display lines, not physical lines
map <Up> gk
map <Down> gj

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za
" And allow docstring viewing when code is folded
let g:SimpylFold_docstring_preview=1

" Add proper PEP 8 indentation for .py files
au BufNewFile,BufRead *.py
\ set tabstop=4
\| set softtabstop=4
\| set shiftwidth=4
\| set textwidth=79
\| set expandtab
\| set autoindent
\| set fileformat=unix

" And add different indentation for other file types
au BufNewFile,BufRead *.js,*.html,*.css,*.r,*.R,*.sql,*.sh
\ set tabstop=2
\| set softtabstop=2
\| set shiftwidth=3

" Add some customizations for YouCompleteMe
 " close auto-complete window after done
let g:ycm_autoclose_preview_window_after_completion=1
 " define a shortcut for goto definition (i.e. pressing the leader key and then 'g'
 " when on an object will go to its definition, I believe?)
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Tell vim to check if python is running a virtualenv, and if so switch to it and
" set us system path so that YouCompleteMe will find appopriate packages
" python with virtualenv support
" DEH: Not working for some reason; might be syntax for an older version of Vim?
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"      execfile(activate_this, dict(__file__=activate_this))
"      EOF

" Make syntax-highlighting prettier
let python_highlight_all=1
syntax on

" Add some logic for colorscheme usage
if has('gui_running')
  set background=light
  colorscheme zenburn
else
  "colorscheme solarized
  set background=light
  colorscheme solarized
endif

" Remap flake8 to <F8> (makes much more sense to me, and frees <F3>-<F7> for colors
"let no_flake8_maps = 1
"autocmd FileType python map <buffer> <F8> :call Flake8()<CR>
" Make <F3> to toggle between light and dark schemes
call togglebg#map("<F3>")
" And make <F4> - <F7> switch between colorschemes
set t_Co=256
map <F4> :colorscheme solarized<CR>
map <F5> :colorscheme PaperColor<CR>
map <F6> :colorscheme gruvbox<CR>
map <F7> :colorscheme tender<CR>
let no_flake8_maps = 1

" make emoji-replacing command
map <F8> :%s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g<CR>


" DEH: 01-23-19: Create hotkey for LLPStartPreview for LaTeX live rendering
map <F2> :LLPStartPreview<CR>

"DEH: 01-03-19: Stole a function for toggling column-80 highlight from:
"https://gist.github.com/jphenow/4437248
nnoremap <F9> :call<SID>EightyLine()<cr>
fun! s:EightyLine()
 if !exists('w:eightyline')
  let w:eightyline = 1
  :set colorcolumn=80  " highlight three columns after 'textwidth'
  :highlight ColorColumn ctermbg=16 guibg=#728187
 else
  unl w:eightyline
  :set colorcolumn=80  " highlight three columns after 'textwidth'
  :highlight ColorColumn NONE
 endif
endfunction

" Set NERDTree to open with <F10>
nnoremap <F10> :NERDTreeToggle<CR>
" And let NERDTree ignore .pyc files
let NERDTreeIgnore=['\.pyc$', '\~$']

" Flag unnecessary whitespace
highlight BadWhitespace term=reverse cterm=reverse ctermfg=4
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Set some other highlight groups
"highlight Todo term=bold cterm=bold ctermfg=1 guifg=White guibg=Red
highlight Todo term=bold ctermfg=Red guifg=#80a0ff gui=bold

" Set sunset params
" NOTE: Change if I move!
let g:sunset_latitude = 37.8716
"DEH: 04-20-20: Changed the next line from negative degrees W to positive
"additive degrees W. The docs say that W and S must be negative, but it was
"always incorrectly setting my daytime/nighttime colors, and this fixed it.
"(setting the UTC_offset to +8 also fixed it, but seemed like more a lie)
"let g:sunset_longitude = -121.2727
let g:sunset_longitude = 301.2727
let g:sunset_utc_offset = -8

" Set tslime configurations
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" Customize indent guides, and set <F12> to toggle them on/off (default off)
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 3
map <F12> :IndentGuidesToggle<CR>

" Set <F10> to toggle paste on and off 
" (put on before pasting to terminal from
" clipboard, to maintain tabbing)
set pastetoggle=<F7>

" Set default colorscheme to light PaperColor
set background=light
colorscheme PaperColor

" Set tab to 4 spaces, not 8
setlocal shiftwidth=4
setlocal expandtab

" turn on cursorline
set cursorline

" start off with light background
autocmd VimEnter * ToggleBG

" wrap all slime-sent Python code in %cpaste and --, to preserve indentation
let g:slime_python_ipython = 1

